---

- name: ensure ssh key exists
  user:
    name: '{{ ansible_user_id }}'
    generate_ssh_key: yes
    ssh_key_file: '.ssh/id_rsa'

- name: ensure key exists at DigitalOcean
  digital_ocean:
    state: present
    command: ssh
    name: '{{ ssh_key_name }}'
    ssh_pub_key: '{{ lookup("file", "~/.ssh/id_rsa.pub") }}'
    api_token: '{{ do_api_token }}'
  register: do_ssh_key

- name: Start the manager
  digital_ocean:
    state: present
    command: droplet
    name: '{{ droplet_name }}-manager'
    api_token: '{{ do_api_token }}'
    size_id: '{{ size_id }}'
    region_id: '{{ region_id }}'
    image_id: '{{ image_id }}'
    ssh_key_ids: '{{ do_ssh_key.ssh_key.id }}'
    unique_name: 'yes'
    wait_timeout: 500
  register: manager

- name: Add the Manager to our inventory.
  add_host:
   name: "{{manager.droplet.ip_address}}"
   groups: "allhosts,manager"
  when: manager.droplet is defined

- name: Start the workers
  digital_ocean:
    state: present
    command: droplet
    name: '{{ droplet_name }}-worker{{ item }}'
    api_token: '{{ do_api_token }}'
    size_id: '{{ size_id }}'
    region_id: '{{ region_id }}'
    image_id: '{{ image_id }}'
    ssh_key_ids: '{{ do_ssh_key.ssh_key.id }}'
    unique_name: 'yes'
    wait_timeout: 500
  register: "worker"
  with_sequence: count={{ no_of_workers }}

- name: Add the workers to our inventory.
  add_host:
   name: "{{ item.droplet.ip_address }}"
   groups: "allhosts,workers"
  with_items:
    - "{{ worker.results }}"

- name: Wait until SSH is available before moving onto the next step
  local_action: 
    module: wait_for 
    host: "{{ item }}"
    port: 22
    delay: 5 
    timeout: 320 
    state: started
  with_items: "{{ groups['allhosts'] }}"